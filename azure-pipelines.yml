# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  # use pipeline_src_dir to facilitate testing out of Azure Pipeline
  pipeline_src_dir: $(Build.SourcesDirectory)
  root_src_dir: $(Build.SourcesDirectory)\s
  root_data_dir: $(Build.BinariesDirectory)\data
  sf_out_dir: $(Build.BinariesDirectory)\sf
  local_dir: $(Build.BinariesDirectory)\usr\local
  local_dev_dir: $(Build.BinariesDirectory)\usr\localdev
  include_dir: $(Build.BinariesDirectory)\usr\local\include
  # and define these to override the defaults in local_paths.props from vcpp-commons
  RootLocalPath: $(Build.BinariesDirectory)\usr\local
  RootLocalDevPath: $(Build.BinariesDirectory)\usr\localdev

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage:  windows-2019
    steps:
    - checkout: self
    # where are we??
    - script: |
        echo
        echo current directory is:
        cd
        echo
        echo BUILD_SOURCESDIRECTORY=%BUILD_SOURCESDIRECTORY%
        echo
        echo Build.SourcesDirectory=$(Build.SourcesDirectory)
        echo
        echo local_dev_dir=$(local_dev_dir)
        echo
        if defined SWIFT_PAT_ENV_VAR echo "SWIFT_PAT is defined"
        echo 
        echo Bash is located at:
        where bash
        where 7z
        where curl
      displayName: 'DEBUG: where repos are checked out'
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
    - script: |
        call third-party.bat
      displayName: 'Install third party libraries and headers'
    # - task: Bash@3
    #   inputs:
    #     targetType: 'inline'
    #     # Retrieving unix paths caused grief. Very poor facilities, at the least badly documented.
    #     script: |
    #       function wslpath() { 
    #         echo "$1" | sed -e 's|\\|/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|'
    #       }
    #       root_src_dir_nix= wslpath $BUILD_SOURCESDIRECTORY/s
    #       local_dir_nix= wslpath $BUILD_SOURCESDIRECTORY/usr/local
    #       local_dev_dir_nix= wslpath $BUILD_SOURCESDIRECTORY/usr/localdev
    #       include_dir_nix= wslpath $BUILD_SOURCESDIRECTORY/usr/local/include
    #       echo root_src_dir_nix=$root_src_dir_nix
    #       echo local_dir_nix=$local_dir_nix
    #       echo local_dev_dir_nix=$local_dev_dir_nix
    #       echo include_dir_nix=$include_dir_nix
    #       mkdir -p $local_dir_nix
    #       cd $local_dir_nix
    #       echo currently under `pwd`
    #       curl -o libs_third_party.7z https://cloudstor.aarnet.edu.au/plus/s/GdV0QmFISDHrwPG/download
    #       curl -o include_third_party.7z https://cloudstor.aarnet.edu.au/plus/s/cl3QJ17UV5HJkzo/download
    #       # which 7z  : /c/ProgramData/Chocolatey/bin/7z
    #       7z x libs_third_party.7z 
    #       7z x include_third_party.7z 
    #       mkdir -p $local_dev_dir_nix/libs/64
    #       mkdir -p $include_dir_nix
    #       exit 0
    #   displayName: 'Install third party libraries and headers'
    - script: |
        call checkout.bat
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
      displayName: check out sources
    - script: |
        call test-setupdev.bat
      displayName: 'TEST: check cruise-control setup_dev upfront'
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: $(Build.SourcesDirectory)\pwsh-setup.ps1
        pwsh: true
      displayName: 'Setup Powershell with Invoke-MsBuild'
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: $(Build.SourcesDirectory)\make-props.ps1
        pwsh: true
      displayName: 'Create user vcpp_config.props'
    # - script: |
    #     call third-party-lib.bat
    #   env:
    #     SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
    #   displayName: Install third party precompiled libraries boost and netcdf
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: $(Build.SourcesDirectory)\build-stack.ps1
        pwsh: true
        arguments: > # Use this to avoid newline characters in multiline string
          -rootSrcDir $(root_src_dir) 
          -localDir $(local_dir) 
          -localDevDir $(local_dev_dir) 
          -includeDir $(include_dir)
      env:
        # needed to override defaults in local_paths.props
        RootLocalPath: $(local_dir)
        RootLocalDevPath: $(local_dev_dir)
      displayName: 'Compile with Invoke-MsBuild'
    - script: |
        call fetch-sample-data.bat
      displayName: 'Fetch unit test and documentation sample data'
    - script: |
        call library-tests.bat
      displayName: 'Run unit tests on the native libraries'
