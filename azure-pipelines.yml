# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

# TODO: test stage, or step if it is worth reusing the ubuntu vm (likely)
stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage:  windows-2019
    steps:
    - checkout: self
    # where are we??
    - script: |
        echo
        echo current directory is:
        cd
        echo
        echo BUILD_SOURCESDIRECTORY=%BUILD_SOURCESDIRECTORY%
        echo
        if defined SWIFT_PAT_ENV_VAR echo "SWIFT_PAT is defined"
        echo 
        echo Bash is located at:
        where bash
      displayName: 'Test: where repos are checked out'
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
    #- script: |
    #    call checkout.bat
    #  env:
    #    SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
    #  displayName: check out sources
    #- task: PowerShell@2
    #  inputs:
    #    targetType: 'filePath'
    #    filePath: $(Build.SourcesDirectory)\pwsh-setup.ps1
    #    arguments: > # Use this to avoid newline characters in multiline string
    #      -input1 "Hello"
    #      -input2 "World"
    #  displayName: 'Setup Powershell with Invoke-MsBuild'
    # - script: |
    #     call third-party-lib.bat
    #   env:
    #     SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
    #   displayName: Install third party precompiled libraries boost and netcdf
    # - task: PowerShell@2
    #   inputs:
    #     targetType: 'filePath'
    #     filePath: $(Build.SourcesDirectory)\pwsh-setup.ps1
    #     arguments: > # Use this to avoid newline characters in multiline string
    #       -input1 "Hello"
    #       -input2 "World"
    #   displayName: 'Compile with Invoke-MsBuild'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo where is curl?
          which curl
          mkdir -p $(Build.SourcesDirectory)/data
          cd $(Build.SourcesDirectory)/data
          curl -o libs_third_party.7z https://cloudstor.aarnet.edu.au/plus/s/GdV0QmFISDHrwPG/download
          echo where is 7z?
          which 7zr
          which 7z
          which 7za
          exit 0
      displayName: 'Checks what is in bash'
