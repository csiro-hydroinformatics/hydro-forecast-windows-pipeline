#############
# Azure build pipeline for streamflow forecasting products, packaging for windows
#############

trigger:
- main

variables:
  # use pipeline_src_dir to facilitate testing out of Azure Pipeline
  pipeline_src_dir: $(Build.SourcesDirectory)
  root_src_dir: $(Build.SourcesDirectory)\s
  root_data_dir: $(Build.BinariesDirectory)\data
  download_dir: $(Build.BinariesDirectory)\downloads
  sf_out_dir: $(Build.BinariesDirectory)\sf
  local_dir: $(Build.BinariesDirectory)\usr\local
  local_dev_dir: $(Build.BinariesDirectory)\usr\localdev
  include_dir: $(Build.BinariesDirectory)\usr\local\include
  # and define these RootLocal* to override the defaults in local_paths.props from vcpp-commons
  RootLocalPath: $(Build.BinariesDirectory)\usr\local
  RootLocalDevPath: $(Build.BinariesDirectory)\usr\localdev
  # We retrieve the artifacts from the Linux build pipelines, to obtain R packages
  linux_packages_dir: $(Build.ArtifactStagingDirectory)\swift_linux

# to get a custom '$(Build.BuildNumber)', and 'r' is a counter reset to 1 every change of the major/minor versions
# TODO: reference to this technique on the web?
name: '0.2.$(Rev:r)'

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage:  windows-2019
    steps:
    - checkout: self
    # where are we??
    #- script: |
    #    echo
    #    echo current directory is:
    #    cd
    #    echo
    #    echo BUILD_SOURCESDIRECTORY=%BUILD_SOURCESDIRECTORY%
    #    echo
    #    echo Build.SourcesDirectory=$(Build.SourcesDirectory)
    #    echo
    #    echo local_dev_dir=$(local_dev_dir)
    #    echo
    #    if defined SWIFT_PAT_ENV_VAR echo "SWIFT_PAT is defined"
    #    echo 
    #    echo Bash is located at:
    #    where bash
    #    where 7z
    #    where curl
    #  displayName: 'DEBUG: where repos are checked out'
    #  env:
    #    SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
    # - task: Bash@3
    #   inputs:
    #     targetType: 'inline'
    #     # Retrieving unix paths caused grief. Very poor facilities, at the least badly documented.
    #     script: |
    #       function wslpath() { 
    #         echo "$1" | sed -e 's|\\|/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|'
    #       }
    #       root_src_dir_nix= wslpath $BUILD_SOURCESDIRECTORY/s
    #       local_dir_nix= wslpath $BUILD_SOURCESDIRECTORY/usr/local
    #       local_dev_dir_nix= wslpath $BUILD_SOURCESDIRECTORY/usr/localdev
    #       include_dir_nix= wslpath $BUILD_SOURCESDIRECTORY/usr/local/include
    #       echo root_src_dir_nix=$root_src_dir_nix
    #       echo local_dir_nix=$local_dir_nix
    #       echo local_dev_dir_nix=$local_dev_dir_nix
    #       echo include_dir_nix=$include_dir_nix
    #       mkdir -p $local_dir_nix
    #       cd $local_dir_nix
    #       echo currently under `pwd`
    #       curl -o libs_third_party.7z https://cloudstor.aarnet.edu.au/plus/s/GdV0QmFISDHrwPG/download
    #       curl -o include_third_party.7z https://cloudstor.aarnet.edu.au/plus/s/TQnRgaYIfzJpdKB/download
    #       # which 7z  : /c/ProgramData/Chocolatey/bin/7z
    #       7z x -y libs_third_party.7z 
    #       7z x -y include_third_party.7z 
    #       mkdir -p $local_dev_dir_nix/libs/64
    #       mkdir -p $include_dir_nix
    #       exit 0
    #   displayName: 'Install third party libraries and headers'
    - script: |
        call dos-setup.bat
        call checkout.bat
      env:
        SWIFT_PAT_ENV_VAR: $(SWIFT_PAT) # the recommended way to map to an env variable
        BRANCH_NAME_ENV_VAR: $(Build.SourceBranchName)
      displayName: check out sources
    - script: |
        call dos-setup.bat
        call third-party.bat
      displayName: 'Fetch/install third party dependencies'
    - script: |
        call dos-setup.bat
        call test-setupdev.bat
      displayName: 'Check cruise-control setup_dev upfront'
    - script: |
        call dos-setup.bat
        call fetch-sample-data.bat
      displayName: 'Fetch documentation and test data'
    - script: |
        call dos-setup.bat
        call fetch-r-sample-data.bat
      displayName: 'Fetch swift R package sample data'
    - task: Bash@3
      displayName: 'Fetch our R source packages'
      inputs:
        targetType: 'inline'
        script: |
          # using $(linux_packages_dir) here fails; dir separators are lost. PITN.
          # linux_packages_dir=$(linux_packages_dir)
          # linux_packages_fwd_dir="${linux_packages_dir//\\//}"
          # instead have to do:
          linux_packages_fwd_dir="${BUILD_ARTIFACTSTAGINGDIRECTORY//\\//}/swift_linux"
          ./fetch-pkgs.sh ${linux_packages_fwd_dir}
      env:
        AZURE_DEVOPS_EXT_PAT: $(AZ_ARTIFACT_DL_PAT)
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: $(Build.SourcesDirectory)\pwsh-setup.ps1
        pwsh: true
      displayName: 'Setup Powershell with Invoke-MsBuild'
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: $(Build.SourcesDirectory)\make-props.ps1
        pwsh: true
      displayName: 'Create user vcpp_config.props'
    - script: |
        call dos-setup.bat
        call install-rtools.bat
      displayName: 'Install RTools'
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: $(Build.SourcesDirectory)\build-stack.ps1
        pwsh: true
        arguments: > # Use this to avoid newline characters in multiline string
          -rootSrcDir $(root_src_dir) 
          -localDir $(local_dir) 
          -localDevDir $(local_dev_dir) 
          -includeDir $(include_dir)
      env:
        # needed to override defaults in local_paths.props
        RootLocalPath: $(local_dir)
        RootLocalDevPath: $(local_dev_dir)
      displayName: 'Compile stack via Invoke-MsBuild'
    - script: |
        call dos-setup.bat
        call library-tests.bat
      displayName: 'Unit tests on the native libraries'
    - script: |
        call dos-setup.bat
        call zip-libraries.bat
      displayName: 'Create zip files of native libraries'
    - script: |
        call dos-setup.bat
        call build-r-pkgs.bat
      displayName: 'Build win binary R packages'
    - script: |
        mkdir $(Build.BinariesDirectory)\version
        echo $(Build.BuildNumber) > $(Build.BinariesDirectory)\version\version.txt
      displayName: 'Create small artifact with the version number'
    - script: |
        if not exist $(Build.ArtifactStagingDirectory)\release mkdir $(Build.ArtifactStagingDirectory)\release
        cd $(Build.ArtifactStagingDirectory)\release\
        7z a swift_win_stack.7z $(sf_out_dir)\
      displayName: 'Zip outputs to single file'
    # - task: CopyFiles@2
    #   displayName: 'Copy build output to the artifact staging directory'
    #   inputs:
    #     sourceFolder: '$(sf_out_dir)'
    #     contents: |
    #           deb_pkgs/**
    #           py_pkgs/**
    #           r_pkgs/**
    #           *.*
    #     targetFolder: '$(Build.ArtifactStagingDirectory)/release'
    - task: CopyFiles@2
      displayName: Copy files for installer version
      inputs:
        sourceFolder: '$(Build.BinariesDirectory)\version'
        contents: '*.*'
        targetFolder: '$(Build.ArtifactStagingDirectory)\version'
    - task: UniversalPackages@0
      displayName: Publish output bundle
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)\release'
        vstsFeedPublish: 'OD222236-DigWaterAndLandscapes/hydro_forecast_win'
        vstsFeedPackagePublish: 'swift_win'
        versionOption: custom
        versionPublish: '$(Build.BuildNumber)'
        packagePublishDescription: 'Windows packages for swift and co.'

    - task: UniversalPackages@0
      displayName: Publish output bundle version
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)\version'
        vstsFeedPublish: 'OD222236-DigWaterAndLandscapes/hydro_forecast_win'
        vstsFeedPackagePublish: 'swift_win_version'
        versionOption: custom
        versionPublish: '$(Build.BuildNumber)'
        packagePublishDescription: 'Version number for windows swift and co. bundle'

